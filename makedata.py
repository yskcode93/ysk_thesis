#!/usr/bin/env python
# coding: utf-8

# In[16]:


# module insatall
import torch
import torch.nn as nn
import torch.optim as opt
import torch.optim.lr_scheduler as lrs
import torch.utils.data as dat
import torch.nn.utils as utils
from torch.nn.utils.rnn import pad_sequence
# distributed learning
import torch.distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP
from torch.utils.data.distributed import DistributedSampler
# a pytorch extension fp-16
from apex.parallel import DistributedDataParallel as DDP_APEX
from apex import amp
# gene batch loader
from file import GeneBatchLoader, sanitize, vocab, write_fna_faa, write_fna_faa_2
from model import Converter, TransformerConverter, FastAutoregressiveConverter, CNN_converter_512, CNN_converter_512_8lay, CNN_converter_512_4lay
# fetch all
from database import fetchall

# train test split
from sklearn.model_selection import KFold, StratifiedKFold

# base package
import re
import glob
import os
import time
import numpy as np
from tqdm import tqdm
from Bio import SeqIO
from preprocess import fasta_to_data_,fasta_to_data, fasta_to_data_2
from Bio import Align, SeqIO, pairwise2
from Bio.Align import substitution_matrices
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import dendrogram, linkage
from matplotlib import pyplot as plt
from scipy.cluster.hierarchy import fcluster
import math
from sklearn.model_selection import train_test_split
from analysis import gc_content, log_cai, rscu, optimize_codon
import pickle


def pickle_load(path):
    with open(path, mode='rb') as f:
        data = pickle.load(f)
        return data


# In[23]:


weight_path  = "./Result/pretrain/protein_family_stratified/weight/weight_M2_6_7/cnn_align_10x10_pretrain/cnn_align_10x10_6000.pt"

ConverterClass = CNN_converter_512_8lay
model = ConverterClass()
pt = torch.load(weight_path)
model.load_state_dict(pt["model"])
cnt = 0
for param in model.parameters():
    if(cnt<28):
        param.requires_grad = False
        cnt+=1
    else:
        cnt+=1
        continue
        
model


# In[21]:


model.layers[28].requires_grad = True


# In[11]:


subcd = rscu("./Result/pretrain/protein_family_stratified/finetune/align_data_seq/tgt_train_cnn_align.fna")


# In[13]:


filepath_train = "./Result/pretrain/protein_family_stratified/finetune/align_data_seq/src_train_cnn_align.fna"
cls_train = glob.glob(filepath_train)
Xcls_test = fasta_to_data_2(cls_train, slen= 700)

clsdat_test = []
for i in range(len(Xcls_test)):
    Xcls_test[i] = str(Xcls_test[i])
    Xcls_test[i] = Xcls_test[i].replace('Seq(','')
    Xcls_test[i] = Xcls_test[i].replace(')','')
    clsdat_test.append(Xcls_test[i])
    
f_path = "./Result/pretrain/protein_family_stratified/finetune/align_data_seq/gen_train_codon_optim_align.fna"
f_path  = open(f_path, 'a' )

for i in range(len(clsdat_test)):
    gen = optimize_codon(clsdat_test[i], subcd)
    f_path.write(">clusterdata_00{}\n".format(i+1))
    f_path.write(str(gen))
    f_path.write("\n")

                    


# In[49]:


pip install swalign


# In[50]:


pip install joblib


# In[51]:


class Alignment:
    seqA: str
    seqB: str
    score: float
        
def alignment(x, y, i, j):
    [a] = pairwise2.align.globalms(x, y, 1.9, 0, -10, -0.1, one_alignment_only=True)

    l  = max(len(x), len(y))
    return a.score/l 


# In[44]:


import swalign
from joblib import Parallel, delayed
from itertools import combinations
from tqdm import tqdm

filepath_test = "./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis/cls_tgt_test_dis50_good.faa"
cls_test = glob.glob(filepath_test)
Xcls_test = fasta_to_data_2(cls_test, slen= 700)

filepath_train = "./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis/cls_tgt_train_dis50_good.faa"
cls_train = glob.glob(filepath_train)
Xcls_train = fasta_to_data_2(cls_train, slen= 700)


clsdat_test = []
for i in range(len(Xcls_test)):
    Xcls_test[i] = str(Xcls_test[i])
    Xcls_test[i] = Xcls_test[i].replace('Seq(','')
    Xcls_test[i] = Xcls_test[i].replace(')','')
    clsdat_test.append(Xcls_test[i])
XLEN_test = len(clsdat_test)

clsdat_train = []
for i in range(len(Xcls_train)):
    Xcls_train[i] = str(Xcls_train[i])
    Xcls_train[i] = Xcls_train[i].replace('Seq(','')
    Xcls_train[i] = Xcls_train[i].replace(')','')
    clsdat_train.append(Xcls_train[i])
XLEN_train = len(clsdat_train)

#result = Parallel(n_jobs=-1)(delayed(alignment)(clsdat_test[i], clsdat_train[j],i,j) for i, j in tqdm(combinations(range(XLEN_test*XLEN_train), 2)))
#result = [(alignment(clsdat[i], clsdat[j],i,j)) for i, j in  tqdm(combinations(range(XLEN), 2))]


#A = np.zeros((XLEN_test, XLEN_train))
#for i in range(XLEN_test):
#    m = -2
#    m_i = 0
#    for j in range(XLEN_train):
#        A[i][j] = np.array(alignment(clsdat_test[i], clsdat_train[j],i,j), dtype="float64")
#        if(m<A[i][j]):
#            m_i = j
#            m = A[i][j]
#    print(m_i)

#for s,i, j in result:
#    A[i][j] = s
#print(A)

#for i in range(XLEN_test):
#    m = -2
#    m_i = 0
#    for j in range(XLEN_train):
#        if(m<A[i][j]):
#            m_i = j
#            m = A[i][j]
#    print(m_i)


# In[24]:


def alignment3(x, y):
    [a] = pairwise2.align.globalms(x, y, 1.9, 0, -10, -0.1, one_alignment_only=True)
    return a


# In[45]:


glist = [86,255,255,255,262,291,1787,386,682,703,1209,1222,1222,1236,1236,90,280,1390]
from Bio.pairwise2 import format_alignment

for i in range(len(clsdat_test)):
    a  = alignment3(clsdat_test[i],clsdat_train[int(glist[i])])
    print(format_alignment(*a))
    


# In[46]:


length_list = []
for i in range(len(clsdat_train)):
    length_list.append(len(clsdat_train[i]))


a  = np.array(length_list)
plt.hist(a)
plt.show()


# In[47]:


length_list = []
for i in range(len(clsdat_test)):
    length_list.append(len(clsdat_test[i]))


a  = np.array(length_list)
plt.hist(a)
plt.show()


# In[36]:


filepath_test = "./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis/cls_tgt_test_dis50_bad.faa"
cls_test = glob.glob(filepath_test)
Xcls_test = fasta_to_data_2(cls_test, slen= 700)

filepath_train = "./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis/cls_tgt_train_dis50_bad.faa"
cls_train = glob.glob(filepath_train)
Xcls_train = fasta_to_data_2(cls_train, slen= 700)


clsdat_test = []
for i in range(len(Xcls_test)):
    Xcls_test[i] = str(Xcls_test[i])
    Xcls_test[i] = Xcls_test[i].replace('Seq(','')
    Xcls_test[i] = Xcls_test[i].replace(')','')
    clsdat_test.append(Xcls_test[i])
XLEN_test = len(clsdat_test)

clsdat_train = []
for i in range(len(Xcls_train)):
    Xcls_train[i] = str(Xcls_train[i])
    Xcls_train[i] = Xcls_train[i].replace('Seq(','')
    Xcls_train[i] = Xcls_train[i].replace(')','')
    clsdat_train.append(Xcls_train[i])
XLEN_train = len(clsdat_train)

#result = Parallel(n_jobs=-1)(delayed(alignment)(clsdat_test[i], clsdat_train[j],i,j) for i, j in tqdm(combinations(range(XLEN_test*XLEN_train), 2)))
#result = [(alignment(clsdat[i], clsdat[j],i,j)) for i, j in  tqdm(combinations(range(XLEN), 2))]
#A = np.zeros((XLEN_test, XLEN_train))
#for i in range(XLEN_test):
#    m = -2
#    m_i = 0
#    for j in range(XLEN_train):
#        A[i][j] = np.array(alignment(clsdat_test[i], clsdat_train[j],i,j), dtype="float64")
#        if(m<A[i][j]):
#            m_i = j
#           m = A[i][j]
#    print(m_i)


# In[37]:


blist = [638,538,225,1430,504,1399,1604,653,68,655,508,23,802,1739,1738,1116,337,251,1273,1274,1553]

for i in range(len(clsdat_test)):
    a  = alignment3(clsdat_test[i],clsdat_train[int(blist[i])])
    print(format_alignment(*a))


# In[42]:


length_list = []
for i in range(len(clsdat_train)):
    length_list.append(len(clsdat_train[i]))


a  = np.array(length_list)
plt.hist(a)
plt.show()


# In[43]:


length_list = []
for i in range(len(clsdat_test)):
    length_list.append(len(clsdat_test[i]))


a  = np.array(length_list)
plt.hist(a)
plt.show()


# In[58]:


import swalign
from joblib import Parallel, delayed
from itertools import combinations
from tqdm import tqdm

filepath = "./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis/cluster_subtilis.fna"
cls = glob.glob(filepath)
Xcls = fasta_to_data_(cls, slen= 700)

clsdat = []
for i in range(len(Xcls)):
    Xcls[i] = str(Xcls[i])
    Xcls[i] = Xcls[i].replace('Seq(','')
    Xcls[i] = Xcls[i].replace(')','')
    clsdat.append(Xcls[i])

XLEN = len(clsdat)
XLEN


# In[81]:


result = Parallel(n_jobs=-1)(delayed(alignment)(clsdat[i], clsdat[j],i,j) for i, j in tqdm(combinations(range(XLEN), 2)))
#result = [(alignment(clsdat[i], clsdat[j],i,j)) for i, j in  tqdm(combinations(range(XLEN), 2))]
A = np.zeros((XLEN,XLEN))
for s,i, j in result:
    A[i][j] = s
    A[j][i] = s
print(A)
np.save("./Result/pretrain/protein_family_stratified/finetune/cluster.npy", A)


# In[41]:


a = np.load("./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cluster_thuringiensis.npy")
a.shape


# In[42]:


plt.figure(figsize = (12,10))
sns.heatmap(a, vmin=0, vmax=0.75)


# In[43]:


Z = linkage(a, 'ward')
fig = plt.figure(figsize=(15, 10))
dn = dendrogram(Z)
plt.savefig("./Result/pretrain/protein_family_stratified/finetune/cluster.png")


# In[26]:


clusters2 = fcluster(Z, 10, criterion='distance')
cls1 = []
cls2 = []
cls3 = []
cls4 = []
cls5 = []
cls6 = []
cls7 = []
cls8 = []
cls9 = []
cls10 = []
cls11 = []
cls12 = []
cls13 = []
cls14 = []
cls15 = []
cls16 = []
cls17 = []
cls18 = []
cls19 = []
cls20 = []
cls21 = []
cls22 = []
cls23 = []
cls24 = []

for i, c in enumerate(clusters2):
    if(c==1):
        cls1.append(i+1)
    elif(c==2):
        cls2.append(i+1)
    elif(c==3):
        cls3.append(i+1)
    elif(c==4):
        cls4.append(i+1)
    elif(c==5):
        cls5.append(i+1)
    elif(c==6):
        cls6.append(i+1)
    elif(c==7):
        cls7.append(i+1)
    elif(c==8):
        cls8.append(i+1)
    elif(c==9):
        cls9.append(i+1)
    elif(c==10):
        cls10.append(i+1)
    elif(c==11):
        cls11.append(i+1)
    elif(c==12):
        cls12.append(i+1)
    elif(c==13):
        cls13.append(i+1)
    elif(c==14):
        cls14.append(i+1)
    elif(c==15):
        cls15.append(i+1)
    elif(c==16):
        cls16.append(i+1)
    elif(c==17):
        cls17.append(i+1)
    elif(c==18):
        cls18.append(i+1)
    elif(c==19):
        cls19.append(i+1)
    elif(c==20):
        cls20.append(i+1)
    elif(c==21):
        cls21.append(i+1)
    elif(c==22):
        cls23.append(i+1)
    elif(c==23):
        cls23.append(i+1)
    elif(c==24):
        cls24.append(i+1)


# In[31]:


cls1_train, cls1_test =  train_test_split(cls1, test_size=0.207, random_state=1999)
cls2_train, cls2_test =  train_test_split(cls2, test_size=0.207, random_state=1999)
cls3_train, cls3_test =  train_test_split(cls3, test_size=0.207, random_state=1999)
cls4_train, cls4_test =  train_test_split(cls4, test_size=0.207, random_state=1999)
cls5_train, cls5_test =  train_test_split(cls5, test_size=0.207, random_state=1999)
cls6_train, cls6_test =  train_test_split(cls6, test_size=0.207, random_state=1999)
cls7_train, cls7_test =  train_test_split(cls7, test_size=0.207, random_state=1999)
cls8_train, cls8_test =  train_test_split(cls8, test_size=0.207, random_state=1999)
cls9_train, cls9_test =  train_test_split(cls9, test_size=0.207, random_state=1999)
cls10_train, cls10_test =  train_test_split(cls10, test_size=0.207, random_state=1999)
cls11_train, cls11_test =  train_test_split(cls11, test_size=0.207, random_state=1999)
cls12_train, cls12_test =  train_test_split(cls12, test_size=0.207, random_state=1999)
cls13_train, cls13_test =  train_test_split(cls13, test_size=0.207, random_state=1999)
cls14_train, cls14_test =  train_test_split(cls14, test_size=0.207, random_state=1999)
cls15_train, cls15_test =  train_test_split(cls15, test_size=0.207, random_state=1999)
cls16_train, cls16_test =  train_test_split(cls16, test_size=0.207, random_state=1999)
cls17_train, cls17_test =  train_test_split(cls17, test_size=0.207, random_state=1999)
cls18_train, cls18_test =  train_test_split(cls18, test_size=0.207, random_state=1999)
cls19_train, cls19_test =  train_test_split(cls19, test_size=0.207, random_state=1999)
cls20_train, cls20_test =  train_test_split(cls20, test_size=0.207, random_state=1999)
cls21_train, cls21_test =  train_test_split(cls21, test_size=0.207, random_state=1999)
#cls22_train, cls22_test =  train_test_split(cls22, test_size=0.207, random_state=1999)
cls23_train, cls23_test =  train_test_split(cls23, test_size=0.207, random_state=1999)
cls24_train, cls24_test =  train_test_split(cls24, test_size=0.207, random_state=1999)


# In[32]:


cluster_train = cls1_train + cls2_train + cls3_train + cls4_train + cls5_train + cls6_train + cls7_train + cls8_train + cls9_train + cls10_train + cls11_train + cls12_train + cls13_train + cls14_train + cls15_train + cls16_train + cls17_train + cls18_train + cls19_train + cls20_train + cls21_train  + cls23_train + cls24_train 
cluster_test = cls1_test + cls2_test + cls3_test + cls4_test + cls5_test + cls6_test + cls7_test + cls8_test + cls9_test + cls10_test + cls11_test + cls12_test + cls13_test + cls14_test + cls15_test + cls16_test +cls17_test + cls18_test + cls19_test + cls20_test + cls21_test + cls23_test + cls24_test 
print(len(cluster_train))
len(cluster_test)


# In[53]:


filepath = "./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cluster_thuringiensis.fna"

with open(filepath) as f:
    for i, line in enumerate(f):
        line = line.replace('\n','')
        if(i%2==0):
            target = '>clusterdata_00'  # 「>clusterdata_00」より後ろ（時刻）を抽出したい
            idx = line.find(target)
            idn = line[idx+len(target):] 
            idn = idn.replace('\n','')
            idn = int(idn)
            if(idn in cluster_train):
                clsid = 0
            elif(idn in cluster_test):
                clsid = 1
            else:
                clsid = 2                
        elif(i%2!=0):
            if(clsid==0):
                with open("./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cls_src_train_dis30.fna", "a") as f:
                    f.write(">clusterdata_00{}\n".format(idn))
                    line = str(line)
                    f.write(line)
                    f.write("\n")
            elif(clsid==1):
                with open("./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cls_src_test_dis30.fna", "a") as f:
                    f.write(">clusterdata_00{}\n".format(idn))
                    line = str(line)
                    f.write(line)
                    f.write("\n")


# In[2]:


goodlist = [20,60,61,62,63,70,71,100,176,190,325, 327, 330, 331,332,341,351,367]
badlist =  [1, 6, 39, 64, 75,79,118,120,122,129, 130, 163, 200, 261, 280, 281, 284, 289, 339, 373, 375]
good_idx = []
bad_idx = []
for i in goodlist:
    good_idx.append(i-1)

for i in badlist:
    bad_idx.append(i-1)

thupath = "./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cls_src_test_dis50.fna"

clusterdata_path = "./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cls_src_test_dis50_bad.fna"
clusterdata_path  = open(clusterdata_path, 'a' )
clusterdata_path2 = "./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/tmp_bad.fna"
clusterdata_path2  = open(clusterdata_path2, 'a' )
thupath = glob.glob(thupath)
thdata  = fasta_to_data_(thupath)
#print(thdata)
for i in range(len(thdata)):
    thdata[i] = str(thdata[i])
    thdata[i] = thdata[i].replace('Seq(','')
    thdata[i] = thdata[i].replace(')','')
    #print(thdata[i])
    print(i)
    if(i in bad_idx):
        clusterdata_path.write(">clusterdata_00{}\n".format(i+1))
        clusterdata_path.write(thdata[i])
        clusterdata_path.write("\n")
    else:
        clusterdata_path2.write(">clusterdata_00{}\n".format(i+1))
        clusterdata_path2.write(thdata[i])
        clusterdata_path2.write("\n")        
                    


# In[56]:


from preprocess import fasta_to_data_,fasta_to_data

#subtlis
cds_path = "./CDSdata/subtilis"
#　1個目の分割のtest
conv_path = "./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis/cls_test"

#fastacds = glob.glob(os.path.join(cds_path, '*.fna'))
#IDs = '000009045'
#X, y = fasta_to_data(fastacds, ids= IDs, slen= 700)
fastacds = glob.glob(os.path.join(cds_path, '*.fna'))
#print(fastacds)
#IDs = '000009045'
Xcds = fasta_to_data_(fastacds, slen= 700)

fastaconv = glob.glob(os.path.join(conv_path, '*.fna'))
Xconv = fasta_to_data_(fastaconv, slen= 700)

print(len(Xconv))
print(len(Xcds))

Xcds = [s for s in Xcds if s not in Xconv]
print(len(Xcds))

newdata_path = open('./CDSdata/subtilis_notest_cluster/subtilis_notest_cluster.fna', 'a')
#for i in range(len(Xcds)):
#    Xcds[i] = str(Xcds[i])
#    Xcds[i] = Xcds[i].replace('Seq(','')
#    Xcds[i] = Xcds[i].replace(')','')
#    newdata_path.write(">subdata_00{}\n".format(i+1))
#    newdata_path.write(Xcds[i])
#    newdata_path.write("\n")


# In[43]:


testfile = "./Result/pretrain/protein_family_stratified/finetune/tgt_1.fna"
trainfile = "./Result/pretrain/protein_family_stratified/finetune/tgt_train_1.fna"
tef = glob.glob(testfile)
trf = glob.glob(trainfile)
Xtef = fasta_to_data_(tef, slen= 700)
Xtrf = fasta_to_data_(trf, slen= 700)
clusterdata_path = open('./Result/pretrain/protein_family_stratified/finetune/cluster_subtilis.fna', 'a')
#for i in range(len(Xtef)):
#   Xtef[i] = str(Xtef[i])
#    Xtef[i] = Xtef[i].replace('Seq(','')
#    Xtef[i] = Xtef[i].replace(')','')
#    clusterdata_path.write(">clusterdata_00{}\n".format(i+1))
#    clusterdata_path.write(Xtef[i])
#    clusterdata_path.write("\n")
#for j in range(len(Xtrf)):
#    Xtrf[j] = str(Xtrf[j])
#    Xtrf[j] = Xtrf[j].replace('Seq(','')
#   Xtrf[j] = Xtrf[j].replace(')','')
#    clusterdata_path.write(">clusterdata_00{}\n".format(j+380))
#    clusterdata_path.write(Xtrf[j])
#    clusterdata_path.write("\n")


# In[185]:


#goodの1-10
good_src = "MQNFVFRNPTKLIFGKDQLEQLKTEIPQFGKKVLLVYGGGSIKRNGIYDNVISILKDINAEVFELTGVEPNPRVSTVKKGIQICKDNGVEFILAVGGGSVIDCTKAIAAGSKYDGDVWDIVTKKAFASEALPFGTVLTLAATGSEMNAGSVITNWETNEKYGWGSPVTFPQFSILDPVHTASVPRDQTIYGMVDIMSHVLEQYFHHGTNTELQDRYCESVLKTVIETAPKLLSDLENYEHRETILYCGTMALNGILAMGVKGDWATHNIEHAVSAVHDIPHGGGLAILFPNWMKHVVEENVSRFKQFAIRVFEIETDGKTDKEVALEGIEALRQFWTSIEAPATLADYGIGEN---EIDIMANKAMAYGEFGNFKKLNKDDVLSIYKASLMYTATSNEKVMELLNTWYIEMRARRIGNAQRLKEKIDIKIQKLKNEKEEALQDQNLLLYYSLLDFRYNYLIDNLGISK---------DSFEKINSFEAPGDNFLAYYYN--FFKGIHSNELGNYIEAKEHYEKAETFLEYVPDELEKAEFYYKLATYHYDIQQALLSIKYATKAKDMYIHYSGYEINVAFCDNILGLSCTYLKEWELAEEHYTAAMSQFQKIG------EEKFIIMIRHNLGWMYATQNLSVLAIRYLSEVVEKSPK-HYKAIYVKAKEHFKLNQTELASVLIEKGLEICNDLHQEEYKNRNLILREMNNNSPAEQFERVVLEGIKYFEREELYYNVQEYYEALATKFYEEDGHSKASKYFHLGLQARKKAFDKEALK--MHVPVKGNEQITKLLNDWYQAMLMQRYVKASNLKGKIDNIINNLQHEKDTKLQDQN-LLLYYSLLDFRYKVLTEGINISPSEFDKIENFNKPVDNYLAYCYHFYKAIHNTFLSNYAEAGEQFEEAESLLKYVPDELEQ-AEFNYRLATFYYQTYKPLPSITYINKAKTTFHNKEGYEINVALCENVLGLTCIQIRQFEQAEEHLNKAIDIVK--KGDNIELLLRLRNNIGWLYASQGLSSLAIRHLSEVTEHLPNHYKAIFLQAKEHYKLREHTAVN--RLIEQGLRTSTQIGNQEYIHRFNILKELNNESELNTLESVIEAGISYFEVEGLTKCVQEYAEILATMFYKEANDKKASKYFYISNESRKQFEEKGALV---MSVHVIKKEEINLLLHEWYREIRSQNFSKAKELKQSIDTKVNSMEEDRKNTEFYSLVDFRFKMLSAEFYPHQSDISKND----LRKMKLDEAPSDESLLYYYHFFKASHATVNGDFKVAEKHYGIAESLLGNIQDPIEKAEFNFKLSSYYYHVCQPILVIQYATRARNTFEGLYGYSRKVAACDNVLGLACVKLNEFEQAEVYFMSSLDILKKQNEE--ELMLRVRHSLGVMYAEQNLSDLALRYLSEVSQKIPNHFRAIFLEARENLKLGKTKLAAS--LIEKGLIICNELEQKEYEHHFTILKEMNENVSAEELELAISKGIYFFNEVGLWQYVQEYAEKLAVKYHEEGNSIKSSEYFYLGYKEKEKGFQKGALK---MYTATSNEKVMELLNTWYIEMRARRIGNAQRLKEKIDIKIQKLKNEKEEALQDQNLLLYYSLLDFRYNYLIDNLGISKDS---------FEKINSFEAPGDNFLAYYYNFFKGIHSNELGNYIEAKEHYEKAETFLEYVPDELEKAEFYYKLATYHYDIQQALLSIKYATKAKDMYIHYSGYEINVAFCDNILGLSCTYLKEWELAEEHYTAAMSQFQKIGEEKFIIMIRHNLGWMYATQNLSVLAIRYLSEVVEKS-----PKHYKAIYVKAKEHFKLNQTELASVLIEKGLEICNDLHQEEYKNRNLILREMNNNSPAEQFERVVLEGIKYFEREELYYNVQEYYEALATKFYEEDGHSKASKYFHLGLQARKKAFDKEALK---MGNLKFQKVTLFEFIIFIHSLQLASGMLIMPSPLATTA-GTDGWISIILGWIVTSIIGVFIILMLQKNPNKNFSQILKTYFGKWIGTILFLAYAFYLFFAGFNTLLKATDIVKVWIFPSTPAYQITILLLLPFIILALSGLRALTSYSMLVFFFTTWMPLFLLFSLKTNYNPLHLLPIFKEGLYPIVKATKETITPYAGLEIAYYIYPFLQKKQKAIKGLLIANTGTMFFYLYVTILSYIYFSPEGIKDVIWPVFHLLKGVRFS--FMERLEIIYIAYYLIVFSTTIYPYLFFSFESVTISLQKNARNWALLAFMLLIVGLFIFLNPDVDQYLFIYSLMDILNVVFFILLPILFFAYSILFTWITRRKQLMESREWERIVDHLLSLVPLFYRKFMLPGEFSSQRHMPPSHTQVLLLLHENGTLAVSEIGKRLAISRPNMTPLLNKLIQEELIERHYSEKDRRVILISLTAEGKLLVNQYQQFILDKLKENFQTLSEEEREKLIHSLQTIQNLILKTNV--MFQGKLRSSSLKTKLLVSFIIILILPSIVIGWTSYQQAKTNFNETILNSAKDNIKILDNVINKELDSKKIDATYFTKLFTQSSYQADQIQNIQNKLEEYNKLHPEMEAIYTGSSNGQFIQSPAIQMPDGYNPTERDWYKEAVKKSGEVIVTAPYKSKTTGNIVITLAKQNEDKSGVLGIDLIINDIVTTSKMVNIGKEGYVAIFDQDKNVVAHPKMKPGEKLEEKLSKELYKQEAGDFHYSLDGEDRNITFKTNKKTGWKIAGIMPSKEIIEAAEPIFYKTITVLGISLIIGGIVIYFIIASIIKPLKQLVISSKKISEGDLTESITVHSKDEIGQLGESFNEMAASLQSVISNINTSASHVAASSEELTASMKQTSEATEQITQAIEQVSSGAEIQTKEVEEGATLLEEVTEGIQRVADSSSLVSTASMYTKKKAENGGKLVEQTVNQMQLIHESVSQSDKIIGLLDDKSKQIGAILEVIQHIAEQTNLLALNAAIEAARAGEQGRGFAIVADEVRKLAEQSGQSSTEIGKLVKEIQFDIKETVSSMNQVGAEVQSGLVVANETKQSFVEILKSTNDTVVQIDSMVDVAKQMTVDAKQVSASINEIAATIEENAASVQNIAGSSEEQLASVDEINAAAVHLSQMAEELQEMIGKFKI--MQERYARQVLFSRIGEMGQRKIREKHVLLIGAGALGAANAEALVRMGIGKLTIADRDYVEWSNLQRQQLYTEEDAQQCKPKAIAAAEHLRKINSEVEIVPVVSDVTLQEIKELTKEVDLILDATDNFDTRLLINDISQKENIPWIYGGCIGSYGVTYTILPGKTPCFRCLMDHP-MGSATCDTAGIIQPAVQMVVAHQVTEAMKILVDDFEALRGTMLSFDIWNNQYLSLKVNRQKKNTCPSCGNTRTYPSLTFEAQMKMEVLCGRNTVQIRSGVKRVLHLEEVQKRLQKS-VLVQKTPYLLSFLIDEYRFVLFTDGRAFIHGTNDVKIAKRLYAKYIG-MNMYLLIITLLSIVIVILGVSWWRWHAFISLTVASLFLAIMSGMPMDKIVSAYETGVGSVLGHLVGILVLGTILGKMMAESGAGMQVAEFFIKSFGIKNLPWAMLIAGFIIGIPVFFEVGILILLPLVISIHKTTKQNILLIALPAIAGLSVVHGLVPPHPGAIVAIGIYKANLGKVLLYSLIITFFAAIIAGPIFAKWIHKRVIPENEPE------LIRVNTKSTKLPGIGVSFLVILLPVMLMVLAAAAPYVPLSN-----TLMKIVTLIGSPIIALLIACFAAFYFLGFRQGIDKKAIKKITEDSLLPIGSIVAIIGAGGGFKQILIDSGVGNAIAQMSEHLALSPIVLAFIVAGLIRIATGSATVALTTAAGIVSPIVENTTGVNLELLVIATGAGALMLSHVNDAGFWMVKEYLGLTVKETFKTWTVLETLLSFIAFGGVLLLDMFV"
good_gen = "MQNFTYWNPTKLIFGRGEVERLPEELKPYGKNVLLVYGGGSIKRSGLYDQVIEQLNKAGATVHELAGVEPNPRVSTVNKGVAICKEQNIDFLLAVGGGSVIDCTKAIAAGAKYDGDAWDIVTKKHQPKDALPFGTVLTLAATGSEMNSGSVITNWETKEKYGWGSPLVFPKFSILDPVNTFTVPKNHTIYGMVDMMSHVFEQYFHHVSNTPYQDRMCESLLRTVIETAPKLINDLENYELRETILYTGTIALNGMLSMGARGDWATHNIEHAVSAVYDIPHAGGLAILFPNWMRHTLSENPARMKQLAVRVFDVEEAGKTDEEIALEGIDKLSAFWTSLGAPNRLADYDINDE---QLDTIANKAMANGTFGQFKSLNKEDVLSILKASLLRAKIPSSSVGVKINEWYLYIRQFQAHDAEALKQEIEQEREDME-------EDQDLLLYFSLMLFRHNLMLDYLMPVKTMENRPQPSFLDEEIESDQKKLTLLLLYYFYFFFFMGMFELKQYEFASAMYYYKEEELKYVEDEDEKEKFEFKFAMAYYYYYQKQTYMNMAYQALAYYTYYELYSYRIRLIECVIAFNANDDDHHEKEDAILHAALALAMAEKEK----YPIAMSYLLINHSYDYEGQYQEAKAYFYFKKAVEREKEPDQAPQAVFAYFLTLCKYKKKNKAEAAKEYGIKLAAARQYAMYKIVLRFYELLYLYTLDENELHALFG---FFEFLELHAYYEDLAHDAAAAFKYSHHYESFALFSAYLLKVEKKIQLQQGG---MASKIIPSSVVGKKIEWWYRHRAFFAVADEEVKKEEIYQDEEMMEEDDLLLYYYSMEERRHQMLLDYMKPEDSEIEEQQYDELLELEEIKQKNTDLLLLYYYFFRFFGEYEEKNREEFIIAYKFKEEKSKAIEFQDRKEEELFFKFESYYYYYMMKHFFMYHAAQKEEYTKKEEYGTNNRIGQFCSIGFNVFLYHKYNKAQIARDFKLYLNQEEEEYQQLLAYTAYYINQYDNYQEKYADAAFEYKEKEVREEYQQIAVQALFFYYHLVFIIYKDSGAHIAYDEYIKSHYEYELDFFVIALYEFEELLLGYLLLPDEEEEQEFYEEEE--KLKDYEDEFHDLAAEYKKYEEEESFAKYSARLAAQMEEMIQQQQCLEGLE-MSAKEPPSSVVVKLNEWWKLIRLFEADDAEVLKKEVIQDLQDMEEDQDLLLYYSLMIFRHHQMLDKYMPPKTHDTRPPQSEMLEKILSQQQKLIGLLSYYYYYFRGMYEFKQKNFVLAAIYYYHAEEKMEAFEDDIEKREFFHKVAEEYYHIKQQHVFMNHILQALDEYYKYEDYYRRRRQQLFFIASNYDDFYHHEKALTHLCDALELAADLEEQ--PMIIIAYLNIANNYYRLGDYQDQAGEFQEAAKVFFEHNPDEAVPAAFGSSHILCKAGQYSKAIQRYDEGIDSAAQREDDFYSEKFLLIQELYKGEGDYRVIHQEVSYYEKEQLLAYAEALFHSDAEVFESSEHQYQEAAYFYEKMKAQEEMIKQNCCYA--LRAKIPSSSVGVKINEWYLYIRQFQAHDAEALKQEIEQEREDME-------EDQDLLLYFSLMLFRHNLMLDYLMPVKTMENRPQPSFLDEEIESDQKKLTLLLLYYFYFFFFMGMFELKQYEFASAMYYYKEEELKYVEDEDEKEKFEFKFAMAYYYYYQKQTYMNMAYQALAYYTYYELYSYRIRLIECVIAFNANDDDHHEKEDAILHAALALAMAEKEKYPIAMSYLLINHSYDYEGQYQEAKAYFYFKKAVEREKEPDQAPQAVFAYFLTLCKYKKKNKAEAAKEYGIKLAAARQYAMYKIVLRFYELLYLYTLDENELHALFG---FFEFLELHAYYEDLAHDAAAAFKYSHHYESFALFSAYLLKVEKKIQLQQGG---MSQKQTPLKLNTFQGISIVANTMLGAGLLTLPRALTTKANTPDGWITLILEGFIFIFFIYLNTLIQKKHQYPSLFEYLKEGLGKWIGSIIGMLICGYFLGVASFETRAMAEMVKFFLLERTPIQVIILTFICCGIYLMVGGLSDVSRLFPFYLTVTIIILLIVFGISFKIFDINNLRPVLGEGLGPIANSLTVVSISFLGMEVMLFLPEHMKKKKYTFRYASLGFLIPIILYILTYIIVVGALTAPEVKTLIWPTISLFQSFELKGIFIERFESFLFVVWIIQFFTTFVIYGYFAANGLKKTFGLSTKT---SMVIIGITVFYFSLWPDDANQVMMYSDYLGYIFVSLFLLPFILFFIVALKRRITTK---VSIKNSHSAKDELLSLVFLFWRAEELNAHISSRRSINAFQPQSVLITHRLIKTKRSHLGKTQTIKSEDMKEQEIPRELAEQPDHQEARADLSIPTGSSSNRSGEARNEQDKQRLKLQASKIQSIGPESQSRPVMSMDHDLNRI-----MKKFLNWIKKSSISKPLIIAFLAILILPITVLSYSSYQSAWNSLDREMISSAKESVEILNSTVQNKLETKVKALTYFSETVTKSAFKDKNKTELKKAFKQYITSNDEVGAVFAAGKDGKTYVYPDADKLPDFDATRQDWYKQAAANKGQAIVSEDYTVEATGKSVVIISKQLKDGSGVVAIDMKIDDLVTTQKKIKIGKEGFAFIISQNKKTIAAPKNKKGTELSGDWTDQVYKKKEGSFEYTYLGKEKKMAFATSQELGWKIAAGMMANEEQDASSKSLNTAGIILAIAIGVGGIIIILVIRRITKPLRKRVVQASKISEGDLTEVIEIISKDEFGVLLESFNHMSASLRSLIHSIQTSVENNASSSEELLAAAAQTSRATEHITMAIEQFSNGNEAQSEKKEEETEHLSEMNNEIAQLVQTASTIIESASDSSEASSKGEKLVEKTTGQMKTIDQSVQAAEEVVKGLEIKSQDIISSLRVINGIADQTNLLLLNAAIEAARAAEYGGGFSVVAEEVRKLAVVSSDSAKEIEEKIQQIVKEIHTSLLMMQSVNQQVEEGLVMTDETTESFKQSIQMTNQIASELQNLNATVEELSAGAQEISSAANDITADAKESSSGIQDIAAASEEQQASMEEIISSSLTTENMMEELLDITKKFKKIKMEERYSRQIRFKQIGEEGQKRLADSHVLIVGAGALGTAGAEGLSRAGVGTITIIDRDYVEWSNLQRQQLYTESDAKLRMPKAMAAKEHLSAINSEIHIEAYVTEGTAETLEPLIEKADVVIDATDNFETRMLINDLAQKTKTPWVYGACVSSQGMFMTVIPGETPCLSCLFEQIPVGGATCDTAGIIPPAVHIVSAYQQAEALKLLTGQKEAIQRGFVTFDVWNNSHMKINVNHVRREECPSCGANAVYPYLQDWNTPKAAVLCGRDTVQVRSESLKRIPKQELIKRLKTIGKVEAN-AFLLHIFYEDFRIVIFNDGRALVHGTNDVKEANSVLARVIGL---MPLIIVALGILALLFLIMGLKLNTFISLLVVSFGVALALGMPFDKVVSSIEAGIGGTLGHIALIFGLGAMLGKLIADSGGAQRIAMTLVNKFGEKNIQWAVVIASFIIGIALFFEVGLVLLIPIVFAISRELKISILFLGIPMVAALSVTHGFLPPHPGPTAIAGEYGANIGEVLLYGFIVAVPTVLIAGPLFTKFAKKIVPASFAKNGNIASLGTQKTFNLEETPGFGISVFTAMLPIIIMSVATIIDLLQETIGFADNGVLAFIRLIGNASTAMIISLLVAVYTMGIKRNIPVKTVMDSCSTAISQIGMMLLIIGGGGAFKQVLINGGVGDYVADLFKGTALSPIILAWLIAAILRISLGSATVAALSTTGLVIPLLGHSD-VNLALVVLATGAGSVIASHVNDAGFWMFKEYFGLSMKEIFATWTLLETIISVAGLGFILLLSLVV"
good_tgt = "MENFTYYNPTKLIFGKGQLEQLRKEFKRYGKNVLLVYGGGSIKRNGLYDQVTGILKEEGAVVHELSGVEPNPRLATVEKGIGLCREHDIDFLLAVGGGSVIDCTKAIAAGVKYDGDAWDIFSKKVTAEDALPFGTVLTLAATGSEMNPDSVITNWETNEKFVWGSNVTHPRFSILDPENTFTVPENQTVYGMVDMMSHVFEQYFHNVENTPLQDRMCFAVLQTVIETAPKLLEDLENYELRETILYAGTIALNGTLQMGYFGDWASHTMEHAVSAVYDIPHAGGLAILFPNWMRYTLDTNVGRFKNLMLNMFDIDTEGKTDKEIALEGIDKLSAFWTSLGAPSRLADYNIGEEKLELIADIAAKEMEHGGFGNFQKLNKDDVLAILRASL-LISITSAEVGMKINEWHRHIQKFNVTDAEMLKAEIERDIEVME-------EDQDLLIYYQLMAFRHKIMLEYTLPSD--ENRMELSEYLNKIEGHKKKLDNMRAYYYN--FFRGMYEFRNGEYTRAITYYKKAERKIPTISDKIEKAEFYFKLSEVYYHMKMTHISMHYAELSYNIYKKHELYSVRRIQCHFVIAGNYDDLENHEKALPHLQEALKGAELLKSKNTHIYATAFFNLGNCYHKMDNLNKAARYIEQALVQYRKINSDVLPQAYHDLALIYFKQGKKEQAMDCFRKGIRSAVDFKDELFMNLFEALDVLYIRNGDTPKLLNIFS---RLENGKGYPYLEELALLGGNLFDYNGKIEDSIICFKKMVYAQKQISKGECMYEI--LISITSAEVGMKINEWHRHIQKFNVTDAEMLKAEIERDIEVMEEDQDLLIYYQLMAFRHKIMLEYTLPSD-ENRMELSEYLNKIEGHKKKLDNMRAYYYNFFRGMYEFRNGEYTRAITYYKKAERKIPTISDKIEK-AEFYFKLSEVYYHMKMTHISMHYAELSYNIYKKHELYSVRRIQCHFVIAGNYDDLENHEKALPHLQEALKGAELLKSKNTHIYATAFFNLGNCYHKMDNLNKAARYIEQALVQYRKINSDVLPQAYHDLALIYFKQGKKEQAMDCFRKGIRSAVDFKDELFMNLFEALDVLYIRNGDTPKLLNIFSRLENGKGYPYLEELALLGGNLFDYNGKIEDSIICFKKMVYAQKQISKGECMYEI---LISITSAEVGMKINEWHRHIQKFNVTDAEMLKAEIERDIEVMEEDQDLLIYYQLMAFRHKIMLEYTLP--SDENRMELSEYLNKIEGHKKKLDNMRAYYYNFFRGMYEFRNGEYTRAITYYKKAERKIPTISDKIEKAEFYFKLSEVYYHMKMTHISMHYAELSYNIYKKHELYSVRRIQCHFVIAGNYDDLENHEKALPHLQEALKGAELLKSKNTHIYATAFFNLGNCYHKMDNLNKAARYIEQALVQYRKINSDVLPQAYHDLALIYFKQGKKEQAMDCFRKGIRSAVDFKDELFMNLFEALDVLYIRNGDTPKLLNIFSRLENGKGYPYLEELALLGGNLFDYNGKIEDSIICFKKMVYAQKQISKGECMYEIMAAYEIPSSQVGVKINKWYKHILAFQVADAVKLKEEIDLDIEQME-------EDQLLLLYYQLISYRHQIMLDYVKPDLHEESQLQYRELIKTLESNQDSISGLSEYYFHLFRGMYEFEQNNYISAISFYRKAEKMLAFVEDEIERAEFHFKVAEVFYIMKQTHFSMNHAVQALETYKAHDFYRVRRIQCHFVISGNYIDYRNYEKALEHLDDAYRLALLEGQPRLIGSALYNIGNCYDDKGELDQAAEYFEKALPVFEDYQLEQLPKALFSLTRVLFKKQDSEAAIRYYEKGIAIAQKRNDFFSLAKYKFLQALYVESVNLNMIQEVFD---YMEEKGLYVYIEEFALDAASYFSHREQYKEAVYFYEKAVSMREMIQRNDCLYEV--MRKSEHKLTFMQTLIMISSTLIGAGVLTLPRSAAETG-SPSGWLMILLQGVIFIIIVLLFLPFLQKNSGKTLFKLNSIVAGKFIGFLLNLYICLYFIGIVCFQARILGEVVGFFLLKNTPMAVVVFIFLAVAIYHVGGGVYSIAKVYAYIFPITLIIFMMLLMFSFRLFQLDFIRPVFEGGYQSFFSLFPKTLLYFSGFEIIFYLVPFMRDPKQVKKAVALGIATSTLFYSITLLIVIGCMTVAEAKTVTWPTISLIHALEVPGIFIERFDLFLQLTWTAQQFACMLGSFKGAHIGLTEIFHLKNKNNAWLLTAMLAATFFITMYPKDLNDVFYYGTLLGYAFLIVITIPFFVWFLSWIQKKIGRGQLQMTSKPLEHVADIEKSLRHIAAIIKQKGREILNQYAITPPQFVGLQWLYELGDMTIGELSGKMYLACSTTTDLIDRMQKNELVERVKDPADRRVVRIHLLPEGERIIQEVITKRQEYLRDMFESFTDEEIAIFEKSLMKLQHEMKRK--MKKILQLIKQRSITRKLLVSFLSILIIPVVILAIFAYQSASSSLDRQMMGSALENVQQLNEIINTSIGEKENSADYFSEWLTKEKYNAKSNASIAEKFSQYISINKDVESIYTSDTKGHFTRYPDLPMPSGYNPVERDWYKKAVANKGKVVITDPYKTASTNTMVVTIAQQTKDGSGVIAINMTIENLLKTTKKVNIGTQGYAFIMTKDKKVVAHPNEQSGTELKGDWLDKMLSADKGDFQYTMDGDKKKMAFDTNKLTGWKIGGTMYLDEIHEAAQPVLHLALIVLAAAIIIGIIVMTLIIRSITTPLKQLVGSSKRISEGDLTETIDIRSKDELGELGKSFNNMASSLRSLIHAIQDSVDNVAASSEELTASAAQTSKATEHITLAIEQFSNGNEKQNENIETAAEHIYQMNDGLTNMAQASEVITDSSVQSTEIASEGGKLVHQTVGQMNVIDKSVKEAEQVVRGLETKSKDITNILRVINGIADQTNLLALNAAIEAARAGEYGRGFSVVAEEVRKLAVQSADSAKEIEGLIIEIVKEINTSLGMFQSVNQEVQTGLDITDKTEMSFKRISEMTNQIAGELQNMSATVQQLSASSEEVSGASEHIASISKESSAHIQDIAASAEEQLASMEEISSSAETLSSMAEELRDMTKRFKIE-MTGRYSRQELFAPIGPSGQKKLKEARAVIIGAGALGTASAEMLVRAGVGSVKIADRDYVEWSNLQRQQLYTEDDVKKEMPKAAAAERRLRSINSDVDVTGLVMDVTAENIFELIRDASIIVDAADNFETRLIVNDAAVKEGIPFLYGACVGSYGLTFTVVPGSTPCLHCLLDALPIGGATCDTAGIISPAVLQVAVFQVTDALKLLTG--EECEPVLRSFDLWKNERSEVRAASLKHDACPSCG-TKDFPFLSYENQTKAAVLCGRNTVQIRSSITKEADLEALAGQLRQAGLEVAANPYLISCRSDDMKMVLFRDGRALIHGTNDIARAKSIYHKWIG----MPILIVAVGVLILLFLIIKVKLNTFVSLIVVSFLVAIGLGMDINKIVLSIETGIGGQLGHLALVFGLGAMLGRLVSDAGGGYRIAITLIDKFGRKRIQAAVVVASFIIGIALFFEVGLVLLIPIVYAIAKELKMPFLYLGIPMAAALNVTHGFLPPHPAPTAISVAYGAHIGQVLLFGIIIAVPTTVIAGPLFNKFAMKRFPGAYQKHGNLSGLGPRKEFQLDETPGFAISAVTSLFPVIFMAMATIFSLLLSEHSKGKD----IIEFIGTPGTAMLISLLLALYTMGYARKISMQEIGRSISESISQIAMMLLIIGGGGAFKQVLIDGGVGDYVADFFRQTNMSPLFVAWTIAAVLRLCLGSATVAALTTAGMAAPLMEAGS-VNPALMVLATGAGSVIACHVNDAGFWMVKEFFGLSMKETFQTWTLLTTVLSVTGLGCVLLAGLVM"


# In[186]:


gap_mark_list = []
for i in range(len(good_src)):
    if(good_src[i]=='-' and good_tgt[i]==good_gen[i] and good_tgt[i]!=good_src[i]):
        #srcがgapでtgtはgapじゃなく、正しく予測できている
        gap_mark_list.append(0)
    elif(good_src[i]=='-' and good_src[i]==good_tgt[i] and good_gen[i]!=good_tgt[i]):
        #srcもtgtもgapだけどgenでミスってる
        gap_mark_list.append(1)
    elif(good_src[i]=='-' and good_src[i]==good_gen[i] and good_gen[i]!=good_tgt[i]):
        #要らないgapをgenで入れている
        gap_mark_list.append(2)
    elif(good_src[i] == '-' and good_tgt[i] != '-' and good_gen[i] != '-' and good_gen[i] != good_tgt[i]):
        #srcのみgapでgenとtgtが異なる
        gap_mark_list.append(3)
    elif(good_src[i] != '-' and good_tgt[i] != '-' and good_gen[i] == '-' ):
        #srcもtgtもgapでは無いのにgenで突然入ってる
        gap_mark_list.append(4)
    else:
        continue
gap_mark_list


# In[187]:


a  = np.array(gap_mark_list)
plt.hist(a)
plt.xticks([0, 1,2,3,4])
plt.show()


# In[177]:


mark_list = []
for i in range(len(good_tgt)):
    if(good_tgt[i]==good_gen[i]==good_src[i]):
        #全部同じ場合(tgt=gen=src)
        mark_list.append(0)
    elif(good_tgt[i]==good_gen[i] and good_gen[i]!=good_src[i]):
        #srcから改善された場合(tgt=gen, gen!=src)
        mark_list.append(1)
    elif(good_src[i]==good_tgt[i] and good_gen[i]!=good_tgt[i]):
        #srcから改悪された場合(src=tgt, gen!=tgt)
        mark_list.append(2)
    elif(good_src[i]==good_gen[i] and good_gen[i]!=good_tgt[i]):
        #srcから改悪された場合(src=tgt, gen!=tgt)
        mark_list.append(3)
    else:
        mark_list.append(4)
mark_list


# In[178]:


a  = np.array(mark_list)
plt.hist(a)
plt.xticks([0,1,2,3,4])
plt.show()


# In[179]:


bad_src = "MAKQLPDIGDYKYGFKDKDVSIFRAGRGLTKEIVEEISRMKEEPQWMLDFRLKSLDKFYEMPMPQWGGDLNDLDFDEITYYVKPSEKSEKSWDEVPDEIKATFDKLGIPEAEQKYLAGVSAQYESEVVYHNMKEDLEALGIVFKDTDSALKENEDIFREHFGKVIPPTDNKFSALNSAVWSGGSFIYVPKGIKVDTPLQAYFRINSENMGQFERTLIIVDEGAHVHYVEGCTAPVYTTNSLHSAVVEIIIKKDAYCRYTTIQNWANNVYNLVTKRAVCEENATMEWIDGNIGSKLTMKYPAVILKGEGARGLTLSIAIAGKGQHQDAGAKMIHLAPNTSSTIVSKSIAKHGGKVTYRGIVHFGPKAKNSRSNIECDTLIMDNQSTSDTIPYNEIKNDYVSLEHEAKVSKVSEEQLFYLMSRGISEQEATEMIVMGFIEPFTRELPMEYAVEMNRLIKFEMEGSIGMRFDEAYSGKVFIKSHP-SFEESKVVIYGMPMDWTVSYRPGSRFGPARIREVSIGLEEYSPYLDRELEEVKYFDAGDIPLPFGNAQRSLDMIEEYVSKLLDADKFPLGLGGEHLVSWPIFKAMAKKYPDLAIIHMDAHTDLR--ESYEGEPLSHSTPIRKVCDLIGPENVYSFGIRSGMKEEFEWAKEVGMNLYKFDVLEPLKEVLP-KLAGRPVYVTIDIDVLDPAHAPGTGTLEAGGITSKELLDSIVAIANSNINVVGADLVEVAPVYDHSDQTPVAASKFVREMLLGWVK--MEQQKKTTIVLFSGDYDKAMAAYIIANGAAAYDQEVTIFHTFWGLNALRKDEHVNVKKTFIEKVFGKMMPRGADKMGLSKMNFAGMGPKMIKGIMKKHNAMALPDLIDLAKEQGIKLVACQMTVDLLGLKEEEIMEGVEFAGVGAYLADASDGNVNLFIMISRYTRPEMGAIWTEENKFKAWLEVEILACEAWAELGDIPKEDVKKIREHASFDIDRIYEIEKETRHDVVAFTRAVSETPALGEERKWVHYGLTSTDVVDTALSYILKQANEIILKDLENFVSILANKAKEHKYTIMMGRTHGVHAEPTTFGLKLGLWYEEMKRNVERFKQAADTVRVGKLSGAVGTYANIDPFVEKYVCENLGLEAAPISTQTLQRDRHAHYMSTLALIATSIEKMAVEIRGLQKSETREVEEAFAKGQKGSSAMPHKRNPIGSENMTGLARVIRGYMMTAYENVPLWHERDISHSSAERVILPDATIALNYMLNRFGNIVKNLTVYPENMKRNMTRTYGLIYSQRVMLTLIDKGMVREEAYDIVQPKAMEAWETQVQFKELVEADERITSKLTQEEINECFNYEHHMQHVDTIFERLGLNEAMADKPARSKQIETEMTLEQVKEQLTELGKKRGVLTYEEIAERMNGFEIESDQMDEYYEYLGEQGIDLVGDNDNEEGPNNRQITKTEEEFDLNDLSVPPGVKINDPVRMYLKEIGRVDLLSAEEEIRLATRIEEGDEEAKRRLAEANLRLVVSIAKRYVGRGMLFLDLIQEGNMGLIKAVEKFDYRKGFKFSTYATWWIRQAITRAIADQARTIRIPVHMVETINKLIRVQRQLLQDLGREPSPEEIGEEMDLAPEKVREILKIAQEPVSLETPIGEEDDSHLGDFIEDQEATSPADHAAYELLKEQLEDVLDTLTDREENVLRLRFGLDDGRTRTLEEVGKVFGVTRERIRQIEAKALRKLRHPSRSKRLKDFLE----MKVLAITSCPNGIAHTYMAAENLQKAADKLGIQMKVETQGGIGVENELTEQEIREADGIIIAADRVVNKDRFIGKKLLVVGVKDGIRKPEELIQKVVDGNVPVYHSDVQKTGNDSQGKKQNPIYRHLMNGVSFMVPFIVVGGLLIAIALTLGGEKTPGGLVIPEGSFWKTIEQIGGASFAFMVPILAGYIAYSIADKPGLVPGMIGGYIAATGSFYGSESGAGFLGGIIAGFLAGYVALGIKKLKVPKAIQPIMPIIIIPVFTSLIVGLAFVFIIGAPVAQVFESLTAWLSGMQGSSSILLALILGAMISFDMGGPVNKVAFLFGSAMIGEGNYEIMGPIAAAICIPPIGMGLATFIGKRKFQESEKEMGKASFTMGLFGITEGAIPFAAQDPLRVIPSIMAGSMTGAVIAMIGNVGDRVAHGGPIVAVLGAVDNVFMFFIAIIAGSLVTAVIVNVLKKDISKAEETQELKEMKEVSATKEVAEVQEQVIEKQAEKVEIQKLTDITSLELIDIN-----LAGETRDDIIDEMIEKLNAVGVLHSDSEFKQAIMSREAESSTGIGMNIAIPHGKSDAVKKPSVVFGIKQSGVDWKSLDGTDAKLVFMIAVPKESEGNEHLKILQMLSRKLMDDSYRERLISVQTKEEAYKLLDDIVMLKIGSHVSMSGKNMLLAASEEAVSYGATTFMIYTGAPQNTRRKPIEELNIEAGRKHMELNGIEEIIVHAPYIINVGNTTKPETFQLGVDFLRMEIERTSALGVAKQIVLHPGAHVGAGADAGIQQIIKGLNEVLTPEQTVNIALETMAGKGTECGRSFEEIAKIIDGVKYNEKLSVCFDTCHTHDAGYDIVNDFDGVLNEFDKIVGIDRLQVLHINDSKNVRGAGKDRHENIGFGHIGYKALHHIVHHPQLMHVPKILETPYVGEDKKDKKPPYKLEIEMLKNGTFDEGLLEKIKAQ-MAELEFEKPVVELRNKIRELKDYTKNSQMDFSEEIRILEEKLENLEEDIYGNLKVWDRVQIARHAERPTTLDYIEHLFTDFFECHGDRLFGDDAAIVGGIAKYKGMPVTVIGHQRGKDTKENIRRNFGMPHPEGYRKALRLMKQAEKFNRPIICFIDTKGAYPGKAAEERGQSEAIARNLFEMAGLTVPVICIVIGEGGSGGALGLGVGDYIHMLENSTYSVITPEGAAAILWKDAGKAKEAAEAMKITAADLKELGVIDEIIPEAKGGAHRNLLKQSENIDLMIRKTFEQLNGISKDELIEKRYEKYMKIGQVSFSNASIGIKVNVGILGIGRYVPEKVVTNHDLEKIMDTSDEWIRTRTGIAERRIADDTIDTSYMAVEAAKKALEDAGVSGEDIDLILVATVTPDRAFPAVACVIQEAIGAKHAAAMDVGAACAGFMYGMITAQQFIQTGTYKNVLVVGSDKLSKIVDWNDRNTAVLFGDGAGAIVMGAVSEGRGVLSFELGADGSGGKHLYQD--EYVMMNGREVFKFAVRQLGESCLRVLDKAGLTKEDVDFLVPHQANIRIMESARERLNLPQEKMSMTIEKFGNTSASSIPIAMVEELQNGRIQDGDLIILVGFGGGLTWGAVALRWGKMELRDLQIFKSVADQGSVSSAAKELNYVQSNVTARIKQLEKELKTPLFYRHKRGMTLTAEGRKMLVYVSKILQD--VDELKQVFLDSETPSGILKIGTVETVSTLPTILSSYYKSYPNVDLSLQAG---LTEELIREVLDHQLDGAFISGPIKHSLIEQYDVSTEKLMLVTQNKAFHIEEFTTTPLLVFNQGCGYRSKLERWLKDEGLLPKRIMEFNILETILNSVALGLGITLVPQSAVHHLSKAGKVHCHAIPEKYGSISTVFIRRKDSYMTNSMRSFLKTIEEHHHINML"
bad_gen = "MTKKIIHIEFYKYKYKDEDTTVFNQYNHCTQEIDKLIYENAPELNWNARFRHKSRDKFFQRASNKWGNRQNNLDDDPIKLLNGPSTEEETSWKDAPPEKLTTFKKLNINESANKPLYNFFATFEHEFLRYFATEDMKKLTRNFNDTKHAFKLKEDIFNYDFEKIASSPTFKSFLLGNSIWSGFGYGYVFKAIKVDVNKLLYFNINKRDFNQFEEMCYIINNNRETNTLNATRAALSQSNGLSGLIVMEIIKKTHNINYGVIQNGKNGHRKGLDFRYIRGETSRGRGEHKKIQKKLQFEPIVVGKKALGAAAKILSIYIAAKRQSQQKAAATIQLSLIFSFESICEARFKEKATIFYNFEKYSELKEKENLAYIEGDMLILHKFSTAIYIEFEEWAQFYTKLIAEPPWIDITTEWGIFWLTFFTSELEYAENITAIFANPPYELLPPIESIIEAGRAKTLIEGNTEMLFEALYEGKNVKPLHRNEFLWLDEIQMDLNQSHGCGFSIG-RKRWSFFREELDIHFWYVPEELRVLIEFMYEFFDLAILFAGAQIIYLYQKAQGQRVIGGKLDERIAGYAEEIAMWGGAFNATKQYKGPVAQYFMEEVGSRQFEAEEYEYCTGIAPGRGYNGRIAYMHAPFVRSSFVLQRLTNPKHHFGLYNNESEVEEQLPEIFEGEGVGYGLIRAGDLEVVGIVIGGYLGAAEKG-------PRELETLLNKAYLSLGAHETYDIGQQAHPGDAALAKDLPRQARLEFWLEY-MEQQREKTIILMSEDQTEGMVGFIMAEGKAAVHQKYIIYHKGTALNAQANYEEIERKEITMAGKAGGELFKDMEARGEARIRAIGMGMKMMPGKMLKEDPQMDVDELENMQLDEIRNIVVAHTFVEENKTNDDQMMNKDKIDESLNPWVKNLGNGPEI-MSSNYQHPELGAIWTEEYKLKAALEVNLLACEAWAIAGDSPKEEVKKIRAHAQFDIVNIFEDHKESRHHDTKPVRAYFETPAYGLERKWINNHLTSTDVVESALIYIMAQANEEILKDLENFVRIIGNKKRDKNYTVIMGRTHGVGSEPTTFGEKRGRWAEKGKREVEREKQLADGRRVEKGAGASGTYATIEEYVEKYNSEQLGLEAAEISTQTLQRSTHFHYKGTLFIGAISAEKEEYKLLNLEKTETQERGEAYAKGKKEHLAPIDKRNPPGKEGPGGLAGRKQGYAMTASSSWPLWRQRRKKNQGYESIILIHADVALTPNLGLYGGQWDNLSPYPQNAVRVITRGPNLIASRGPLLTPLDKGRDRQEAYEIVVQKAKDKKLIEQVIESQTEGEELIEYSETYLLINEFFEYAHHQAPVEEEYERQGGEK-MADLEEKSQNIETEKTQEEVKEQMTKLGKKPGKKTYNKIAELMNGFEIESDSKYEYEEETGDQGIDLTGDDEEEEGLVHDQVLKIEEKFSYAEEAVPPGMKINIPSRRAIKDHGKVDELSAEEPRLLAMKQGEGDEEALRRLVPALERLVLSASPIYVGYGMLFRDILNEATNGGTKVMEKFDHKKQGKFSHLAYYTIKNNQTRKQADQKFTHRIVVVMIERINQMDRIQRQKMQSMQPEPSLEYDQEELDKVREKVKELATLLQQRVSLLTHKGEKDDLRLIGRDEDQEAKWPIDRAQEEPLKEEDLLIDDLNLEPREIADTIRRQSMENDRRALDEMNKEEDAEGRKAMPDERKRVRKMRTVILPKLLDEGLEEENDMKVGGISVIPSIIKKRYITAQQLAKSKDKLGIQTKIAIQGNSGGPQVIAEKEIQPLIIIMKAASGWTDQITFQIRRLITEDVRDGGKRRDPDDVREEDGGTPGFISTLAKVPNEQEPKDFNPVAIMILNGIIILVIIGGEGEVILSISIGMGGHKAPGGLLMPKESIITVIMSAGAGFMVIMIAIGIEIIAEELVPFIAIVPGFFGEFILGQIAFLAWIAIAALFSVFIFLIYIALIARENFLLIEPIIEIIEEDMNISLIVLLIIVALFFGPIIVAIAAEQMEVLMRLFIQSTASVTFLIFAMIAAFMIIKMSIGPQAEVIIFGHLAGISELNSINITKAVLIVMIITRVITAFTTILSLSKAKKTEAGDAAIFVGIGKITAVGVALIAEAKMRKLIVLGAAAVVEAVLLVIGIAGEAAEIIAIIVVNMQINGVGIVLAIAIIGAIVGVAINVNGFKEQLVDINDKPNQGDNGASKVASAQVDGGTDAPAKQAGRLIITGRQEGDSSADREENPMEAEAVGEPEGVEGTIVLQVILSEYSYDTKQHQGKQVMKKSAHQTSIVIPIINQINQPGQPVQSQEGFESVVAGTTKVIVSWEQELIIANVIEEIYGIIPEQLTAILVEGDEELFADLEIKASLSAKIIETIKDEEE---MCKIGSHISMNGKNMLLAAKITAVSFKATTIMMYTGGPDNTYKRKKEELNIQAGRKHMKTEGHEEIIVHASHIILTGNRTKQDAWKLGLEFIRMEIERTGAGGMLKLIIQHARSHVGAGADAGIDQIIDGLKELLTPEHTVQIYLHEMGGQGTEAGRSFEEIAKIIDGVKDKEISTYCFDTCHTNDLGKQVVNDKDGVLNETDIVVGAMCLQVLIIIDSGNIKGSGKGGVKFIGVGIIGDKKIHSVDGHPEKKVKSGKLDTPLQGEDQKDGTPKKKSQVSLLGKFGFKDILLENKKTM-MNKLEFENESVELREKSLELLEYNLEGRMDFSEEPRVLEEKLEWHEEDVYGWLKVWDEFCIKEHLERPVTLEKFERLFTDFFECHLERLFGDEAAIEGGLVQYKGLPVTVIGHRKGKDTKEKIGMNFGMYHKEGYAKALLMMKEADKFNRPEIGYIDGKLAYEGKAAEERGQHAAAARNLFEMAGLTVIVIVIVLGEGGSGGAIGLGVGDVIHFLEHSTYSIKDPEGPAAILWNDAGGAKETEIAMEIEALDLKKLGKIEPIIPELTGYVHKGYLLKEEESDLIIDAVFEVLNGKKKAEMEKKPGEKYVKVKEVAFYNEDIGV-MNIGIIHIGRYLPQKVLTNDELQKLVSSLDEWVKTKTGVAEKRIAKGTIKVEYMAVEAAPKALEPAGVQGHDVDLILVPTVTPDESFPAVACVIQEAIGAKHAAAMDVGAAHAGLMYGMITAQVLIQTGSYKNVLVGGGDKLSKIVEWNDRNTAVLLGDGAGAIIMGSVGSGKGMLSFPLGAEGSGGEHLYKD--EYVMMDGREVFKFAVRQAGEACLRPLDKDGLPKEEVDYLIPHEANISMMESAREALFLPEEKMSMTIEEFGGTSASEIPIVMVEDMQDKRIGDGGLILMVGFGGGLTWGAQLLKSER-MESEYTIFKLHQPMGSTLLTTEKISILTNHIAKEIKRFNESYAGFLGLRIKKNPLTPKKTAEFLLSKNAIATKNPSKEKTRYYGGSETQQNILPFGYSETFLLLSQRRVKILLELAGEEISYTKHAYMLIDELFEGRFMGASNLTREAKGVEELAGPHKGAMTERLKPEREQEKIKQAAKIAGERGRFREHDADFIREELLLLNEKEERNRLKDPKKKETLASTFEKTRNTALVFERDFILTPKNDKLNMERVENSQYIANKFKPFIPEIFIEFALLREISTTLAP------"
bad_tgt = "MAKKMPDIGEYKYGFHDKDVSIFRSERGLTKEIVEEISRMKEEPQWMLDFRLKSLEHFYNMPMPQWGGDLNSLNFDEITYYVKPSERSERSWDEVPEEIKQTFDKLGIPEAEQKYLAGVSAQYESEVVYHNMKEDLEAQGIVFKDTDSALKENEDIFREHWAKVIPPTDNKFAALNSAVWSGGSFIYVPKGVKVETPLQAYFRINSENMGQFERTLIIVDEEASVHYVEGCTAPVYTTNSLHSAVVEIIVKKGGYCRYTTIQNWANNVYNLVTKRTVCEENATMEWIDGNIGSKLTMKYPACILKGEGARGMTLSIALAGKGQHQDAGAKMIHLAPNTSSTIVSKSISKQGGKVTYRGIVHFGRKAEGARSNIECDTLIMDNKSTSDTIPYNEILNDNISLEHEAKVSKVSEEQLFYLMSRGISEEEATEMIVMGFIEPFTKELPMEYAVEMNRLIKFEMEGSIGMRFDEAYSGKVFIASRP-EWEEADAILYGMPMDWTVSYRPGSRFGPSRIREVSIGLEEYSPYLDRDLADLNFFDAGDIPLPFGNPQRSLDMIEEYVDSILEKGKFPMGMGGEHLVSWPVIKAMYKKYPDLAIIHFDAHTDLR--VDYEGEPLSHSTPIRKAAELIGPHNVYSFGIRSGMKEEFEWAKENGMHISKFEVLEPLKEVLP-KLAGRPVYVTIDIDVLDPAHAPGTGTVDAGGITSKELLASVHEIARSEVNVKGADLVEVAPVYDHSEQTANTASKIIREMLLGFVK-MTEQTKRTTIVLFSGDYDKAMAAYIIANGAAAYDHEVTIFHTFWGFNALRKEELIPVKKGFLEKMFGKMMPRGADKMGLSKMNFAGMGPKMIKNVMKKHNVLTLPQLIEMAQEQGVKLVACTMTMDLLGLQEKELLDDIDYAGVAAYLADAEEGSVNLFIMIERYSRPEMSAIWTDENRFQAWLEVEILACEAWAELGVIPKEDVKVMRENASFDINRILEIEKDTRHDVVAFTRAVSES--LGEERKWVHYGLTSTDVVDTALSYLLKQANDILLKDLERFVDIIKEKAKEHKYTVMMGRTHGVHAEPTTFGLKLALWHEEMKRNLERFKQAKAGIEVGKISGAVGTYANIDPFVEQYVCEKLGLKAAPISTQTLQRDRHADYMATLALIATSIEKFAVEIRGLQKSETREVEEFFAKGQKGSSAMPHKRNPIGSENMTGMARVIRGYMMTAYENVPLWHERDISHSSAERIILPDATIALNYMLNRFSNIVKNLTVFPENMKRNMDRTLGLIYSQRVLLALIDTGLTREEAYDTVQPKAMEAWEKQVPFRELVEAEEKITSRLSPEKIADCFDYNYHLKNVDLIFERLGLA------MADKQTHETELTFDQVKEQLTESGKKRGVLTYEEIAERMSSFEIESDQMDEYYEFLGEQGVELISENEETEDPNIQQLAKAEEEFDLNDLSVPPGVKINDPVRMYLKEIGRVNLLSAKEEIAYAQKIEEGDEESKRRLAEANLRLVVSIAKRYVGRGMLFLDLIQEGNMGLMKAVEKFDYRKGYKFSTYATWWIRQAITRAIADQARTIRIPVHMVETINKLIRVQRQLLQDLGREPTPEEIAEDMDLTPEKVREILKIAQEPVSLETPIGEEDDSHLGDFIEDQEATSPSDHAAYELLKEQLEDVLDTLTDREENVLRLRFGLDDGRTRTLEEVGKVFGVTRERIRQIEAKALRKLRHPSRSKRLKDFLE----MKLLAITSCPNGIAHTYMAAENLQKAADRLGVSIKVETQGGIGVENKLTEEEIREADAIIIAADRSVNKDRFIGKKLLSVGVQDGIRKPEELIQKALNGDIPVYRSATKSESGNHQEKKQNPIYRHLMNGVSFMVPFIVVGGLLIAVALTLGGEKTPKGLVIPDDSFWKTIEQIGSASFSFMIPILAGYIAYSIADKPGLVPGMIGGYIAATGSFYDSASGAGFLGGIIAGFLAGYAALWIKKLKVPKAIQPIMPIIIIPVFASLIVGLAFVFLIGAPVAQIFASLTVWLAGMKGSSSILLALILGAMISFDMGGPVNKVAFLFGSAMIGEGNYEIMGPIAVAICIPPIGLGIATFLGKRKFEASQREMGKAAFTMGLFGITEGAIPFAAQDPLRVIPSIMAGSMTGSVIAMIGNVGDRVAHGGPIVAVLGAVDHVLMFFIAVIAGSLVTALFVNVLKKDITASPVLSETAPTSAPSEAAAANEIKQPIQSQKAEMSEFKKLTDIISPELIEPN-----LSGETSDDIIDELIQKLSRRGALLSESGFKQAILNREQQGTTAIGMNIAIPHGKSEAVREPSVAFGIKRSGVDWNSLDGSEAKLIFMIAVPKESGGNQHLKILQMLSRKLMDDNYRERLLSVQTTEEAYKLLEEIELLRIGSHVSMSGKHMLLAASQEAVSYGANTFMIYTGAPQNTRRKKIEDLNIEAGRAHMQENGIDEIIVHAPYIINIGNTTNPSTFELGVDFLRSEIERTAAIG-AKQIVLHPGAHVGAGAEAGIKKIIEGLNEVIDPNQNVQIALETMAGKGSECGRSFEELAQIIEGVTHNEQLSVCFDTCHTHDAGYNIVEDFDGVLNEFDKIIGIDRIKVLHINDSKNVKGARKDRHENIGFGEIGFDALQYVVHHEQLKDIPKILETPYVGEDKKNKKPPYRFEIEMLKEKQFDDTLLEKILQQVAPRLEFEKPVIELQTKIAELKKFTQDSDMDLSAEIERLEDRLAKLQDDIYKNLKPWDRVQIARLADRPTTLDYIEHLFTDFFECHGDRAYGDDEAIVGGIAKFHGLPVTVIGHQRGKDTKENLVRNFGMPHPEGYRKALRLMKQADKFNRPIICFIDTKGAYPGRAAEERGQSEAIAKNLFEMAGLRVPVICIVIGEGGSGGALGLGVGNHLHMLENSTYSVISPEGAAALLWKDSSLAKKAAETMKITAPDLKELGIIDHMIKEVKGGAHHDVKLQASYMDETLKQSLKTLLKLSEEELVQQRYEKYKAIGKVSVEDQYIGVNMKAGILGVGRYIPEKVLTNHDLEKMVETSDEWIRTRTGIEERRIAADDVFSSHMAVAAAKNALEQAEVAAEDLDMILVATVTPDQSFPTVSCMIQEQLGAKKACAMDISAACAGFMYGVVTGKQFIESGTYKHVLVVGVEKLSSITDWEDRNTAVLFGDGAGAAVVGPVSDDRGILSFELGADGTGGQHLYLNEKRHTIMNGREVFKFAVRQMGESCVNVIEKAGLSKEDVDFLIPHQANIRIMEAARERLELPVEKMSKTVHKYGNTSAASIPISLVEELEAGKIKDGDVVVMVGFGGGLTWGAIAIRWGRMELRDLQIFKCVAHHKSITGAAKELNYVQSNVTARIKQLENELKTPLFNRHKKGVSLSPEGRKMIEYVNKILKD--VEELEQVFLDTEIPSGILKIGTVETVRILPTIIASYYKKYPNVDLSLQAG---LTEELIKKVMNHELDGAFISGPLKHSILEQYDVYTEKLTLVTSNKTFNIEDFSTTPILVFNQGCGYRSRLEQWLKDEGVLPNRMMEFNILETILNSVALGLGITVVPESAVMHLAVQGKVYCHPLPEKDSCISTIFIRHKDAYLTNSMRSLLKTIVEHKNMSMA"


# In[188]:


gap_mark_list = []
for i in range(len(bad_src)):
    if(bad_src[i]=='-' and bad_tgt[i]==bad_gen[i] and bad_tgt[i]!=bad_src[i]):
        #srcがgapでtgtはgapじゃなく、正しく予測できている
        gap_mark_list.append(0)
    elif(bad_src[i]=='-' and bad_src[i]==bad_tgt[i] and bad_gen[i]!=bad_tgt[i]):
        #srcもtgtもgapだけどgenでミスってる
        gap_mark_list.append(1)
    elif(bad_src[i]=='-' and bad_src[i]==bad_gen[i] and bad_gen[i]!=bad_tgt[i]):
        #要らないgapをgenで入れている
        gap_mark_list.append(2)
    elif(bad_src[i] == '-' and bad_tgt[i] != '-' and bad_gen[i] != '-' and bad_gen[i] != bad_tgt[i]):
        #srcのみgapでgenとtgtが異なる
        gap_mark_list.append(3)
    elif(bad_src[i] != '-' and bad_tgt[i] != '-' and bad_gen[i] == '-' ):
        #srcもtgtもgapでは無いのにgenで突然入ってる
        gap_mark_list.append(4)
    else:
        continue
gap_mark_list


# In[190]:


a  = np.array(gap_mark_list)
plt.hist(a)
plt.xticks([0, 1,2,3,4])
plt.show()


# In[182]:


mark_list = []
for i in range(len(bad_tgt)):
    if(bad_tgt[i]==bad_gen[i]==bad_src[i]):
        #全部同じ場合(tgt=gen=src)
        mark_list.append(0)
    elif(bad_tgt[i]==bad_gen[i] and bad_gen[i]!=bad_src[i]):
        #srcから改善された場合(tgt=gen, gen!=src)
        mark_list.append(1)
    elif(bad_src[i]==bad_tgt[i] and bad_gen[i]!=bad_tgt[i]):
        #srcから改悪された場合(src=tgt, gen!=tgt)
        mark_list.append(2)
    elif(bad_src[i]==bad_gen[i] and bad_gen[i]!=bad_tgt[i]):
        #srcから改悪された場合(src=tgt, gen!=tgt)
        mark_list.append(3)
    else:
        mark_list.append(4)
mark_list


# In[183]:


a  = np.array(mark_list)
plt.hist(a)
plt.xticks([0,1,2,3,4])
plt.show()


# In[50]:


thupath = "./Result/pretrain/protein_family_stratified/finetune/cluster_thuringiensis/cls_src_train_dis50_bad.fna"
thupath = glob.glob(thupath)
X = fasta_to_data(thupath, slen= 700)
path_w = './test_w2.txt'
with open(path_w, mode='a') as f:
    f.write(str(X))
X.shape


# In[47]:


thupath = "./CDSdata/12_aa/nc_data/tgt1.fna"
thupath = glob.glob(thupath)
X = fasta_to_data(thupath, slen= 700)
X = X.to('cpu').detach().numpy().copy()
X = np.delete(X, X.shape[0]-1, 0)

print(X)
np.save("./CDSdata/12_aa/nc_data/tgt1.npy", X)


# In[48]:


X.shape


# In[35]:


a = np.zeros([2,3])
b = np.zeros([5,3])
c = np.vstack((a,b))
c.shape


# In[40]:


src_train = np.load("./CDSdata/alignment/hiratani_data/src_train.npy")
print("src_train")
print(src_train)
print(src_train.shape)
tgt_train = np.load("./CDSdata/alignment/hiratani_data/tgt_train.npy")
print("tgt_train")
print(tgt_train)
print(tgt_train.shape)
src_test = np.load("./CDSdata/alignment/hiratani_data/src_test.npy")
print("src_test")
print(src_test)
print(src_test.shape)
tgt_test = np.load("./CDSdata/alignment/hiratani_data/tgt_test.npy")
print("tgt_test")
print(tgt_test)
print(tgt_test.shape)


# In[41]:


for i in range(1887):
    cnt_nogap = []
    for j in range(750):
        if(src_train[i, j]!=65 and tgt_train[i, j]!=65):
            if(src_train[i, j]!=0 and tgt_train[i, j]!=0):
                cnt_nogap.append(int(j))
    via_src = np.zeros(700, dtype=np.int16)
    via_tgt = np.zeros(700, dtype=np.int16)
    check = 0
    print(len(cnt_nogap))
    for k in cnt_nogap:
        via_src[check] = int(src_train[i,k])
        via_tgt[check] = int(tgt_train[i,k])
        check = check + 1
    if(i == 0):
        new_src_train  = via_src
        new_tgt_train  = via_tgt
    else:
        new_src_train = np.vstack((new_src_train,via_src)) 
        new_tgt_train = np.vstack((new_tgt_train,via_tgt)) 
        
print(new_src_train)
print(new_src_train.shape)


# In[42]:


for i in range(472):
    cnt_nogap = []
    for j in range(750):
        if(src_test[i, j]!=65 and tgt_test[i, j]!=65):
            if(src_test[i, j]!=0 and tgt_test[i, j]!=0):
                cnt_nogap.append(int(j))
    via_src = np.zeros(700, dtype=np.int16)
    via_tgt = np.zeros(700, dtype=np.int16)
    check = 0
    print(len(cnt_nogap))
    for k in cnt_nogap:
        via_src[check] = int(src_test[i,k])
        via_tgt[check] = int(tgt_test[i,k])
        check = check + 1
    if(i == 0):
        new_src_test  = via_src
        new_tgt_test  = via_tgt
    else:
        new_src_test = np.vstack((new_src_test,via_src)) 
        new_tgt_test = np.vstack((new_tgt_test,via_tgt)) 
        
print(new_src_test)
print(new_src_test.shape)


# In[32]:


check = 0
for i in range (1887):
    via_src_one = np.zeros((65, len(new_src_train[1,:])))
    via_tgt_one = np.zeros((65, len(new_tgt_train[1,:])))
    for j in range (700):
        via_src_one[new_src_train[i][j]][j] = 1
        via_tgt_one[new_tgt_train[i][j]][j] = 1
    if(check == 0):
        new_src_train_one = via_src_one
        new_tgt_train_one = via_tgt_one
        check = check + 1
    else:
        new_src_train_one = np.vstack((new_src_train_one,via_src_one)) 
        new_tgt_train_one = np.vstack((new_tgt_train_one,via_tgt_one)) 
        check = check + 1
        print(check)

        
new_tgt_train_one.shape


# In[33]:


new_tgt_train_one = np.reshape(new_tgt_train_one, (1887, 65, 700))
new_src_train_one = np.reshape(new_src_train_one, (1887, 65, 700))


# In[35]:


check = 0
for i in range (472):
    via_src_one = np.zeros((65, len(new_src_test[1,:])))
    via_tgt_one = np.zeros((65, len(new_tgt_test[1,:])))
    for j in range (700):
        via_src_one[new_src_test[i][j]][j] = 1
        via_tgt_one[new_tgt_test[i][j]][j] = 1
    if(check == 0):
        new_src_test_one = via_src_one
        new_tgt_test_one = via_tgt_one
        check = check + 1
    else:
        new_src_test_one = np.vstack((new_src_test_one,via_src_one)) 
        new_tgt_test_one = np.vstack((new_tgt_test_one,via_tgt_one)) 
        check = check + 1
        print(check)

new_tgt_test_one = np.reshape(new_tgt_test_one, (472, 65, 700))
new_src_test_one = np.reshape(new_src_test_one, (472, 65, 700))


# In[38]:


np.save('./CDSdata/alignment/src_train_rev_one',new_src_train_one)
np.save('./CDSdata/alignment/tgt_train_rev_one',new_tgt_train_one)
np.save('./CDSdata/alignment/src_test_rev_one',new_src_test_one)
np.save('./CDSdata/alignment/tgt_test_rev_one',new_tgt_test_one)


# In[6]:


X = np.load("./CDSdata/alignment/one_to_one/src_train_rev.npy")
X.shape


# In[12]:


Y = np.load("./CDSdata/alignment/tgt_test_rev.npy")
Y.shape


# In[11]:


X = np.load("./CDSdata/alignment/tgt_test_rev.npy")
X = torch.from_numpy(X.astype(np.int64)).clone()
print(X)
write_fna_faa_2(X, "./Result/pretrain/protein_family_stratified/finetune/align_data_seq/tgt_cnn_align", "TGT")  


# In[3]:


thupath = "./CDSdata/alignment/one_src_train_rev.npy" 
X = np.load(thupath)
X = torch.from_numpy(X.astype(np.int64)).clone()
subpath = "./CDSdata/alignment/one_tgt_train_rev.npy"
Y = np.load(subpath)
Y = torch.from_numpy(Y.astype(np.int64)).clone()
write_fna_faa_2(X, "./Result/pretrain/protein_family_stratified/finetune/align_data_seq/src_train_cnn_align_one", "SRC") 
write_fna_faa_2(Y, "./Result/pretrain/protein_family_stratified/finetune/align_data_seq/tgt_train_cnn_align_one", "TGT") 


# In[50]:


Y = np.load("./CDSdata/hiratani_data_for_pretrain/raw_data/thuringiensis_700.npy")
Y.shape


# In[43]:


Y2 = np.load("./CDSdata/hiratani_data_for_pretrain/raw_data/ecoli_700.npy")
Y2.shape


# In[51]:


Y4 = np.load("./CDSdata/hiratani_data_for_pretrain/raw_data/neighbor_700.npy")
Y4.shape


# In[53]:


Y5 = np.concatenate([Y, Y4], 0)
Y5.shape


# In[37]:


np.save("./CDSdata/hiratani_data_for_pretrain/pretrain_1_2.npy", Y3)


# In[54]:


np.save("./CDSdata/hiratani_data_for_pretrain/pretrain_1_3.npy", Y5)


# In[9]:


X = np.load("./CDSdata/alignment/three_to_one/tgt_three_one.npy")
X = torch.from_numpy(X.astype(np.int64)).clone()
print(X.shape)
X


# In[10]:


check = 0
for i in range (5433):
    via_src_one = np.zeros((65, len(X[1,:])))
    via_tgt_one = np.zeros((65, len(X[1,:])))
    for j in range (700):
        via_src_one[X[i][j]][j] = 1
        via_tgt_one[X[i][j]][j] = 1
    if(check == 0):
        new_src_train_one = via_src_one
        new_tgt_train_one = via_tgt_one
        check = check + 1
    else:
        new_src_train_one = np.vstack((new_src_train_one,via_src_one)) 
        new_tgt_train_one = np.vstack((new_tgt_train_one,via_tgt_one)) 
        check = check + 1
        print(check)

        
new_tgt_train_one.shape


# In[11]:


new_tgt_train_one = np.reshape(new_tgt_train_one, (5433, 65, 700))


# In[12]:


np.save('./CDSdata/alignment/tgt_train_rev_one',new_src_train_one)


# In[26]:


X1 = np.load("./CDSdata/alignment/three_to_one/onehot_src_three_one.npy")
X1 = np.reshape(X1, (5433, 65, 700))
X1 = torch.from_numpy(X1.astype(np.int64)).clone()
X1.shape


# In[27]:


X2 = np.load("./CDSdata/alignment/three_to_one/onehot_tgt_three_one.npy")
X2 = np.reshape(X2, (5433, 65, 700))
X2 = torch.from_numpy(X2.astype(np.int64)).clone()
X2.shape


# In[28]:


np.save("./CDSdata/alignment/three_to_one/onehot_src_three_one",X1)
np.save("./CDSdata/alignment/three_to_one/onehot_tgt_three_one",X2)


# In[96]:


df = pd.read_csv('./CDSdata/res_sonic/runs/sonic_76236929_default_72cpus_ml05_ot_op/ortholog_relations/ortholog_pairs.sonic_76236929_default_72cpus_ml05_ot_op.tsv', sep='\t')
df = df.iloc[0:60714,0:2]
df


# In[97]:


df.iat[0,1]


# In[24]:


path = './CDSdata/30species_aa/GCA_000009045.1_ASM904v1_translated_cds.faa'
id_list = []
seq_list = []
for record in SeqIO.parse(path, 'fasta'):
    id_part = record.id
    desc_part = record.description
    seq = record.seq
    seq = str(seq)
    seq  = seq .replace('-','')
    
    id_list.append(id_part)
    seq_list.append(seq)
    #print(id_part)
    #print(seq)
    
sub_d = dict(zip(id_list, seq_list))
sub_d
with open('./CDSdata/30species_aa/dict_for_6_15/subtilis_2.pkl', 'wb') as f:
    pickle.dump(sub_d, f)


# In[7]:


f1 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/1_aa.pkl')
f2 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/2_aa.pkl')
f3 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/3_aa.pkl')
f4 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/4_aa.pkl')
f5 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/5_aa.pkl')
f6 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/6_aa.pkl')
f7 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/7_aa.pkl')
f8 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/8_aa.pkl')
f9 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/9_aa.pkl')
f10 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/10_aa.pkl')
f11 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/11_aa.pkl')
f12 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/12_aa.pkl')
f13 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/13_aa.pkl')
f14 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/14_aa.pkl')
f15 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/15_aa.pkl')
f16 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/16_aa.pkl')
f17 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/17_aa.pkl')
f18 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/18_aa.pkl')
f19 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/19_aa.pkl')
f20 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/20_aa.pkl')
f21 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/21_aa.pkl')
f22 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/22_aa.pkl')
f23 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/23_aa.pkl')
f24 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/24_aa.pkl')
f25 = pickle_load('./CDSdata/30species_aa/dict_for_6_15/25_aa.pkl')

f1.update(**f2,**f3,**f4,**f5,**f6,**f7,**f8,**f9,**f10,**f11,**f12,**f13,**f14,**f15,**f16,**f17,**f18,**f19,**f20,**f21,**f22,**f23,**f24,**f25)


# In[29]:


all_aa = pickle_load('./CDSdata/30species_aa/dict_for_6_15/All_aa.pkl')
sub = pickle_load('./CDSdata/30species_aa/dict_for_6_15/subtilis_2.pkl')
sub_test  = pickle_load('./CDSdata/30species_aa/dict_for_6_15/sub_test.pkl')

subtilis_path = open('./CDSdata/subtilis2.faa', 'a')
all_aa_path = open('./CDSdata/25all_aa_data.faa', 'a')

#    newdata_path.write(">subdata_00{}\n".format(i+1))
#    newdata_path.write(Xcds[i])
#    newdata_path.write("\n")

df = pd.read_csv('./CDSdata/res_sonic/runs/sonic_76236929_default_72cpus_ml05_ot_op/ortholog_relations/ortholog_pairs.sonic_76236929_default_72cpus_ml05_ot_op.tsv', sep='\t')
df = df.iloc[0:60714,0:2]
cnt = 0

for i in range(df.shape[0]):
    sub_seq = sub[df.iat[i, 0]]
    ori_seq = all_aa[df.iat[i, 1]]

    sub_seq = str(sub_seq)
    sub_seq = sub_seq .replace('Seq(','')
    sub_seq  = sub_seq .replace(')','')
    
    if sub_seq in sub_test.values():
        continue
        
    else:
        ori_seq = str(ori_seq)
        ori_seq = ori_seq .replace('Seq(','')
        ori_seq  = ori_seq .replace(')','')
        
        cnt += 1
        
        subtilis_path.write(">subdata_00{}\n".format(cnt))
        subtilis_path.write(sub_seq)
        subtilis_path.write("\n")
        all_aa_path.write(">srcdata_00{}\n".format(cnt))
        all_aa_path.write(ori_seq)
        all_aa_path.write("\n")
        
        
#a =  'MNINVDVKQNENDIQVNIAGEIDVYSAPVLREKLVPLAEQGADLRICLKDVSYMDSTGLGVFVGTFKMVKKQGGSLKLENLSERLIRLFDITGLKDIIDISAKSEGGVQ'
#if a in sub_test.values():
#    print('good')


# In[28]:


sub.values()


# In[10]:


test_path =  "./Result/pretrain/protein_family_stratified/finetune/subtilis_test.faa"
id_list = []
seq_list = []
for record in SeqIO.parse(test_path, 'fasta'):
    id_part = record.id
    desc_part = record.description
    seq = record.seq
    seq = str(seq)
    seq = seq .replace('Seq(','')
    seq  = seq .replace(')','')
    seq  = seq .replace('*','')
    

    id_list.append(id_part)
    seq_list.append(seq)
    #print(id_part)
    #print(seq)
    
sub_d = dict(zip(id_list, seq_list))

with open('./CDSdata/30species_aa/dict_for_6_15/sub_test.pkl', 'wb') as f:
    pickle.dump(sub_d, f)

sub_d.values()


# In[ ]:




